#include "./AddBroadcast1.hxx"
#include "./AddBroadcast2.hxx"
#include "./AddBroadcast3.hxx"
#include "./AddBroadcast4.hxx"
#include "./AddBroadcast5.hxx"
#include "./AddBroadcast6.hxx"
#include "./AddBroadcast7.hxx"

#include <iostream>

const std::string path = "/home/ahmat/TMVAInference/Test/BroadcastBinaryOp";

int main() {
  constexpr float eps = 1e-3;

  {
    std::cout << "1\n";
    float a[] = {1.0626695,  0.43842875,  1.22476468,  0.79763274,  0.98688211,
                 0.25267614, 0.44874883,  0.31516773,  -0.78771195, 0.64565664,
                 0.50450593, -0.41265227, -0.22474539, -0.22362374, 0.00509674,
                 0.16927211, 1.06756969,  -0.81634773, 0.88467744,  0.78902059};
    float b[] = {-0.78023305, -1.34029483, -3.01482951, 0.53641361,
                 -1.22594789};
    TMVA_SOFIE_AddBroadcast1::Session s(path + "AddBroadcast1.hxx");
    std::vector<float> out = s.infer(a, b);

    float z[] = {0.28243644,  -0.90186608, -1.79006483, 1.33404634,
                 -0.23906578, -0.52755691, -0.891546,   -2.69966178,
                 -0.25129834, -0.58029126, -0.27572713, -1.7529471,
                 -3.23957491, 0.31278987,  -1.22085115, -0.61096094,
                 -0.27272514, -3.83117724, 1.42109105,  -0.4369273};

    for (size_t i = 0; i < out.size(); i++) {
      if (std::abs(out[i] - z[i]) > eps) {
        std::cout << "Different output\n";
        break;
      }
    }
    std::cout << "Passed\n";
  }

  {
    std::cout << "2\n";
    float b[] = {0.60081805, 0.56575772, -0.58408511, -1.50827751, 1.2396254};
    float a[] = {
        -1.22516739e+00, -2.50373737e+00, -6.14517347e-01, 4.43165956e-01,
        4.09232228e-03,  1.43520073e+00,  -8.37526920e-01, 1.18762642e+00,
        -1.42122220e+00, 3.77123343e-01,  -6.16450821e-01, 1.96641319e+00,
        -2.03568224e+00, -5.36703377e-01, -2.22149348e+00, -1.58297075e+00,
        -1.25149214e+00, 6.50629098e-01,  2.06339687e+00,  6.02281648e-01,
        -5.39034004e-01, -1.26280821e+00, 7.87767451e-01,  1.08251530e-01,
        2.32829794e+00,  -1.50890004e+00, -5.95592927e-01, -9.20059053e-02,
        1.63228625e+00,  1.94686070e+00,  7.45655684e-01,  3.86955114e-01,
        -1.83205116e+00, -1.15734817e+00, 3.80085814e-02,  -2.16949162e-01,
        -2.35165487e-01, 2.18171406e-01,  6.13588954e-02,  -8.57086260e-01,
        -2.01864267e+00, -1.61373575e+00, -2.02050258e+00, -3.25052069e-01,
        -1.07114643e-01, 4.68470099e-01,  1.99557999e-01,  -1.94637668e+00,
        2.47900553e-01,  7.76198825e-01,  -1.98736855e-01, -2.00884998e+00,
        1.46847865e+00,  9.61028795e-01,  -8.14965358e-03, 4.63333332e-01,
        -1.11316244e-01, 1.82046921e+00,  -1.00519072e-01, 2.40577520e+00,
        2.57814258e+00,  -1.51412865e+00, -6.48090386e-02, 9.22939224e-01,
        -1.31486041e+00, 3.67387151e-01,  -2.17020478e-03, -4.74744054e-01,
        -6.28942699e-01, -1.31704730e+00, -6.20633846e-01, -4.90250204e-01,
        -2.12485120e-01, -2.36786681e-02, 2.88809968e-02,  -7.44777791e-01,
        1.30091804e-02,  -1.68105549e+00, 8.22247057e-02,  -1.14939503e+00,
        -1.57565418e+00, -7.99386689e-01, -4.06411097e-01, 1.09358391e+00,
        1.58323366e+00,  -8.15174970e-02, -9.09925044e-02, 2.35596716e+00,
        -6.85364818e-02, 4.12883924e-01,  5.00495425e-01,  -1.48442647e+00,
        -5.19349052e-01, 3.81025828e-01,  -1.06188597e-01, 2.83921542e-01,
        1.13215001e+00,  1.21558052e+00,  -1.04667496e+00, -9.41151099e-01,
        -4.04363040e-02, 1.45554304e+00,  1.64025681e-01,  -3.34693361e-01,
        1.27701314e+00,  8.64744621e-01,  1.09621430e+00,  -1.06563435e+00,
        -1.55637568e+00, 2.14343040e+00,  4.69610352e-01,  9.09135609e-01,
        -6.20603382e-01, -1.04235434e+00, -1.32974691e+00, -1.35968049e-01,
        9.62438348e-01,  1.13413513e+00,  -9.24612219e-01, -2.26132356e+00};
    TMVA_SOFIE_AddBroadcast2::Session s(path + "AddBroadcast2.hxx");
    std::vector<float> out = s.infer(a, b);

    float z[] = {
        -0.62434934, -1.93797965, -1.19860246, -1.06511155, 1.24371772,
        2.03601878,  -0.2717692,  0.60354131,  -2.92949971, 1.61674874,
        -0.01563277, 2.53217091,  -2.61976735, -2.04498089, -0.98186808,
        -0.9821527,  -0.68573442, 0.06654399,  0.55511936,  1.84190705,
        0.06178405,  -0.69705049, 0.20368234,  -1.40002598, 3.56792334,
        -0.90808199, -0.02983521, -0.67609102, 0.12400874,  3.1864861,
        1.34647373,  0.95271283,  -2.41613627, -2.66562568, 1.27763398,
        0.38386889,  0.33059223,  -0.3659137,  -1.44691861, 0.38253914,
        -1.41782462, -1.04797803, -2.60458769, -1.83332958, 1.13251076,
        1.06928815,  0.76531572,  -2.53046179, -1.26037696, 2.01582423,
        0.4020812,   -1.44309226, 0.88439354,  -0.54724872, 1.23147575,
        1.06415138,  0.45444148,  1.2363841,   -1.60879658, 3.6454006,
        3.17896063,  -0.94837093, -0.64889415, -0.58533829, -0.07523501,
        0.9682052,   0.56358752,  -1.05882916, -2.13722021, -0.0774219,
        -0.0198158,  0.07550752,  -0.79657023, -1.53195618, 1.2685064,
        -0.14395974, 0.5787669,   -2.2651406,  -1.4260528,  0.09023037,
        -0.97483613, -0.23362897, -0.99049621, -0.4146936,  2.82285906,
        0.51930055,  0.47476522,  1.77188205,  -1.57681399, 1.65250932,
        1.10131347,  -0.91866875, -1.10343416, -1.12725168, 1.1334368,
        0.88473959,  1.69790773,  0.63149541,  -2.55495247, 0.2984743,
        0.56038175,  2.02130076,  -0.42005943, -1.84297087, 2.51663854,
        1.46556267,  1.66197202,  -1.64971946, -3.06465319, 3.3830558,
        1.0704284,   1.47489333,  -1.20468849, -2.55063185, -0.09012151,
        0.46485,     1.52819607,  0.55005002,  -2.43288973, -1.02169816};

    for (size_t i = 0; i < out.size(); i++) {
      if (std::abs(out[i] - z[i]) > eps) {
        std::cout << "Different output\n";
        break;
      }
    }
    std::cout << "Passed\n";
  }

  {
    std::cout << "3\n";
    float b[] = {0.13225244, -0.47801406, -1.47034622, 0.87786363, -0.51388502,
                 0.77012016, 0.99407484,  -0.41014198, 1.76506248, 1.24142803};
    float a[] = {
        -0.79900037, 1.26774471,  0.10287351,  -0.00704713, 0.19927171,
        1.77125926,  0.23393901,  -0.75160577, -0.40987021, 0.02957325,
        2.48770369,  2.72426688,  0.16116267,  0.13580884,  -1.34550983,
        1.08341747,  -0.57232679, -0.27434247, 2.29759196,  0.72506479,
        -0.35984264, -1.47553974, 0.46544721,  0.45304508,  0.39350919,
        0.25335039,  -2.15455262, 0.58592831,  0.0907586,   1.32830358,
        2.16876532,  -1.31509165, -0.77901816, 1.72970744,  0.89410519,
        1.18891089,  0.58372505,  -0.6117035,  -0.83829228, 0.63917945,
        0.66626077,  -1.07667629, 0.01411519,  -0.67082652, -0.04556866,
        -0.04949148, -1.87075929, 0.25587637,  0.14715114,  -0.74584515,
        -1.19373527, -1.52142058, -0.92522942, -0.98126531, -0.07535746,
        -1.4692508,  -0.08861242, 0.64951867,  -0.16918995, 0.87015361,
        0.57688991,  1.36293834,  1.28256834,  0.39245538,  0.43308474,
        0.84529828,  -0.56686547, -0.84791844, -0.11286944, 0.60857973,
        -0.79519511, -0.20491925, -1.52951743, -0.39030064, -2.76160767,
        0.09055906,  -0.99142034, 0.33480785,  -1.09999883, 1.36149355,
        0.18557576,  0.55407001,  1.23164067,  -0.23469015, -1.37274723,
        1.80717934,  1.42966758,  0.72077395,  -0.09774939, 1.12065382,
        -0.51515613, -0.9527945,  0.87646967,  -0.59440101, -0.12440208,
        -0.71096692, -0.6301275,  0.51726169,  1.23726643,  1.56255466,
        -0.94469759, -0.38114756, -0.42021761, -0.58921487, -0.71439637,
        0.04793575,  -2.04214516, -0.45765407, -1.12307202, 0.90727137,
        0.96272832,  0.54303206,  -0.84973033, 0.28780329,  0.17027854,
        -0.11893711, -1.22414638, -1.62747593, 0.53264501,  0.53483601};

    TMVA_SOFIE_AddBroadcast3::Session s(path + "AddBroadcast3.hxx");
    std::vector<float> out = s.infer(a, b);

    float z[] = {
        -6.66747937e-01, 7.89730644e-01,  -1.36747271e+00, 8.70816495e-01,
        -3.14613309e-01, 1.90351170e+00,  -2.44075053e-01, -2.22195199e+00,
        4.67993413e-01,  -4.84311768e-01, 2.61995613e+00,  2.24625281e+00,
        -1.30918355e+00, 1.01367247e+00,  -1.85939485e+00, 1.21566991e+00,
        -1.05034085e+00, -1.74468868e+00, 3.17545559e+00,  2.11179770e-01,
        -2.27590204e-01, -1.95355380e+00, -1.00489901e+00, 1.33090871e+00,
        -1.20375826e-01, 3.85602826e-01,  -2.63256668e+00, -8.84417908e-01,
        9.68622227e-01,  8.14418556e-01,  2.30101776e+00,  -1.79310571e+00,
        -2.24936438e+00, 2.60757107e+00,  3.80220173e-01,  1.32116333e+00,
        1.05710991e-01,  -2.08204972e+00, 3.95713481e-02,  1.25294428e-01,
        7.98513207e-01,  -1.55469035e+00, -1.45623103e+00, 2.07037113e-01,
        -5.59453678e-01, 8.27609595e-02,  -2.34877335e+00, -1.21446985e+00,
        1.02501477e+00,  -1.25973017e+00, -1.06148284e+00, -1.99943464e+00,
        -2.39557564e+00, -1.03401682e-01, -5.89242481e-01, -1.33699837e+00,
        -5.66626485e-01, -8.20827546e-01, 7.08673679e-01,  3.56268594e-01,
        1.34701008e+00,  2.35701318e+00,  8.72426361e-01,  2.15751786e+00,
        1.67451277e+00,  1.61541844e+00,  4.27209371e-01,  -1.25806042e+00,
        1.65219304e+00,  1.85000776e+00,  -2.50749521e-02, 7.89155583e-01,
        -1.93965941e+00, 1.37476185e+00,  -1.52017964e+00, 8.60679220e-01,
        2.65449563e-03,  -7.53341313e-02, 6.65063658e-01,  2.60292159e+00,
        9.55695921e-01,  1.54814485e+00,  8.21498686e-01,  1.53037234e+00,
        -1.31319200e-01, 2.57729950e+00,  2.42374241e+00,  3.10631971e-01,
        1.66731310e+00,  2.36208186e+00,  2.54964027e-01,  4.12803372e-02,
        4.66327691e-01,  1.17066147e+00,  1.11702596e+00,  5.91532438e-02,
        3.63947332e-01,  1.07119714e-01,  3.00232892e+00,  2.80398269e+00,
        -1.74577432e-01, 6.12927281e-01,  -8.30359593e-01, 1.17584762e+00,
        5.27031664e-01,  8.18055914e-01,  -1.04807033e+00, -8.67796047e-01,
        6.41990469e-01,  2.14869940e+00,  1.73284848e+00,  1.53710689e+00,
        -1.25987231e+00, 2.05286577e+00,  1.41170658e+00,  6.51183049e-01,
        -2.30071547e-01, -2.03761790e+00, 2.29770750e+00,  1.77626405e+00};

    for (size_t i = 0; i < out.size(); i++) {
      if (std::abs(out[i] - z[i]) > eps) {
        std::cout << "Different output\n";
        break;
      }
    }
    std::cout << "Passed\n";
  }

  {
    std::cout << "4\n";
    float b[] = {1.94301397, 0.40606817};
    float a[] = { 0.50898894, -0.27829921, -0.68761628,  0.33186382,  0.57915535,
        0.406858  ,  1.4203833 ,  0.19857093};
        TMVA_SOFIE_AddBroadcast4::Session s(path + "AddBroadcast4.hxx");
    std::vector<float> out = s.infer(a, b);

    float z[] = {2.45200291, 1.66471476, 1.25539769, 2.27487779, 0.98522352,
       0.81292617, 1.82645147, 0.6046391};
        for (size_t i = 0; i < out.size(); i++) {
      if (std::abs(out[i] - z[i]) > eps) {
        std::cout << "Different output\n";
        break;
      }
    }
    std::cout << "Passed\n";
  }

   {
    std::cout << "5\n";
    float b[] = {-0.45616139, -0.05853134,  1.09564217,  0.95880315,  0.94995322,
       -0.35864105,  1.08570897,  0.6028053};
    float a[] = {1.69787452,  1.10641673,  2.19755165,  0.06709206,  0.04572308,
       -2.14504366, -0.47730702,  0.15205423, -0.25159224, -0.07529807,
        0.5174367 ,  0.08267595,  0.34015625,  0.09460231, -1.16608969,
       -0.23466058, -0.5520268 , -0.13844847,  0.53055759,  0.17068648,
       -0.49491276, -1.4246271 , -0.99973914, -0.2571329};
        TMVA_SOFIE_AddBroadcast5::Session s(path + "AddBroadcast5.hxx");
    std::vector<float> out = s.infer(a, b);

    float z[] = {1.24171313,  1.04788539,  3.29319382,  1.02589521, -0.41043831,
       -2.203575  ,  0.61833515,  1.11085738, -0.70775363, -0.13382941,
        1.61307887,  1.0414791 ,  1.29010948, -0.26403874, -0.08038072,
        0.36814471,  0.39792642, -0.49708952,  1.61626656,  0.77349178,
        0.45504046, -1.78326815,  0.08596983,  0.34567239};
   for (size_t i = 0; i < out.size(); i++) {
      if (std::abs(out[i] - z[i]) > eps) {
        std::cout << "Different output\n";
        break;
      }
    }
    std::cout << "Passed\n";
  }

{
    std::cout << "6\n";
    float b[] = {1.05498675, -1.64311041,  0.11925147, -1.59755778, -0.01445313,
       -0.69440541, -0.12011281,  0.00539323, -0.16923531,  2.34533598,
        1.30268048,  0.45699443};
    float a[] = { 0.03162163,  1.36340443, -0.34736459, -0.71856324,  0.40669968,
       -0.37595741,  0.22234952,  1.69563792,  0.91459166, -0.02081215,
       -1.64894217, -0.01189261,  0.58031339, -0.11880191,  0.70099317,
       -0.37424243, -0.23980527, -0.03178407, -0.27969109,  0.01895688,
        1.32111755,  0.02113906,  0.51450298, -1.41760768, -0.19220553,
        0.23529522,  0.95199908, -1.38971445, -0.75836965, -0.90956958,
       -0.13006828, -0.64390454, -0.0808229 ,  0.79134757,  1.00684867,
       -1.43818087, -0.14550621, -0.33635512, -0.6185612 , -0.49281407,
       -1.12947258,  1.61818821, -0.05826431, -1.47802183,  0.25637381,
       -0.1547858 ,  2.50788792,  0.30898059};
        TMVA_SOFIE_AddBroadcast6::Session s(path + "AddBroadcast6.hxx");
    std::vector<float> out = s.infer(a, b);

    float z[] = {1.08660839, -0.27970598,  0.70762216, -2.36167365,  0.52595116,
       -1.97351519,  0.341601  ,  0.09808014,  0.90013853, -0.71521756,
       -1.66339531, -0.70629803,  1.63530014, -1.76191232,  1.75597992,
       -2.01735285, -0.12055379, -1.62934185, -0.16043962, -1.5786009 ,
        1.30666441, -0.67326635,  0.50004984, -2.11201309, -0.31231834,
        0.24068845,  0.83188627, -1.38432122, -0.92760496,  1.43576641,
       -0.29930359,  1.70143144,  1.22185757,  1.248342  ,  2.30952915,
       -0.98118644, -0.26561902, -0.33096189, -0.73867402, -0.48742084,
       -1.29870789,  3.96352419, -0.22749962,  0.86731415,  1.55905429,
        0.30220863,  3.8105684 ,  0.76597502};
        for (size_t i = 0; i < out.size(); i++) {
      if (std::abs(out[i] - z[i]) > eps) {
        std::cout << "Different output\n";
        break;
      }
    }
    std::cout << "Passed\n";
  }

{
    std::cout << "7\n";
    float b[] = {-0.42164834, -0.61767078, -0.68778897, -1.14175916,  0.63204375,
       -0.60630317};
    float a[] = {1.40519865e+00, -2.87660856e-01,  7.49375999e-02,  1.22074840e+00,
       -4.86212681e-01, -6.88210109e-01, -6.77434705e-01,  3.67088873e-01,
        8.05744026e-04, -2.08031088e-01,  9.69779132e-01,  7.58373863e-01};
        TMVA_SOFIE_AddBroadcast7::Session s(path + "AddBroadcast7.hxx");
    std::vector<float> out = s.infer(a, b);

    float z[] = {0.9835503 , -0.7093092 , -0.34671074,  0.79910006, -1.10388346,
       -1.30588089, -1.29510549, -0.25058191, -0.68698323, -0.89582006,
        0.28199016,  0.07058489,  0.26343949, -1.42942001, -1.06682156,
        0.07898924,  0.14583107, -0.05616636, -0.04539095,  0.99913263,
       -0.60549743, -0.81433426,  0.36347596,  0.15207069};
        for (size_t i = 0; i < out.size(); i++) {
      if (std::abs(out[i] - z[i]) > eps) {
        std::cout << "Different output\n";
        break;
      }
    }
    std::cout << "Passed\n";
  }

}
